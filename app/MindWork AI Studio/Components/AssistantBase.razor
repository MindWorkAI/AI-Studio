@using AIStudio.Chat
<MudText Typo="Typo.h3" Class="mb-2 mr-3">
    @this.Title
</MudText>

<InnerScrolling HeaderHeight="12.3em">
    <ChildContent>
        <MudForm @ref="@this.form" @bind-IsValid="@this.inputIsValid" @bind-Errors="@this.inputIssues" Class="pr-2">
            <MudText Typo="Typo.body1" Align="Align.Justify" Class="mb-6">
                @this.Description
            </MudText>

            @if (this.Body is not null)
            {
                @this.Body
            }
        </MudForm>
        <Issues IssuesData="@this.inputIssues"/>

        @if (this.isProcessing)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mb-6" />
        }
        <div id="@ASSISTANT_RESULT_DIV_ID" class="mr-2 mt-3">
            @if (this.ShowResult && this.resultingContentBlock is not null)
            {
                <ContentBlockComponent Role="@this.resultingContentBlock.Role" Type="@this.resultingContentBlock.ContentType" Time="@this.resultingContentBlock.Time" Content="@this.resultingContentBlock.Content"/>
            }
        </div>
        
        <div id="@AFTER_RESULT_DIV_ID" class="mt-3">
        </div>
        
        @if (this.FooterButtons.Count > 0)
        {
            <MudStack Row="@true" Wrap="Wrap.Wrap" Class="mt-3 mr-2">
                @foreach (var buttonData in this.FooterButtons)
                {
                    switch (buttonData)
                    {
                        case var _ when !string.IsNullOrWhiteSpace(buttonData.Tooltip):
                            <MudTooltip Text="@buttonData.Tooltip">
                                <MudButton Variant="Variant.Filled" Color="@buttonData.Color" StartIcon="@GetButtonIcon(buttonData.Icon)" OnClick="async () => await buttonData.AsyncAction()">
                                    @buttonData.Text
                                </MudButton>
                            </MudTooltip>
                            break;

                        default:
                            <MudButton Variant="Variant.Filled" Color="@buttonData.Color" StartIcon="@GetButtonIcon(buttonData.Icon)" OnClick="async () => await buttonData.AsyncAction()">
                                @buttonData.Text
                            </MudButton>
                            break;
                    }
                }
            </MudStack>
        }
    </ChildContent>
</InnerScrolling>