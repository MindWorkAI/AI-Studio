@attribute [Route(Routes.ASSISTANT_EDI)]
@using MudExtensions
@inherits AssistantBaseCore

<MudText Typo="Typo.body1" Class="mb-3">
    You can imagine it like this: Hypothetically, when Wikipedia implemented the EDI, it would vectorize
    all pages using an embedding method. All of Wikipediaâ€™s data would remain with Wikipedia, including the
    vector database (decentralized approach). Then, any AI Studio user could add Wikipedia as a data source to
    significantly reduce the hallucination of the LLM in knowledge questions.
</MudText>

<MudText Typo="Typo.body1">
    <b>Related links:</b>
</MudText>
<MudList T="string" Class="mb-6">
    <MudListItem T="string" Icon="@Icons.Material.Filled.Link" Target="_blank" Href="https://github.com/MindWorkAI/EDI">EDI repository with example implementation in .NET and C#</MudListItem>
    <MudListItem T="string" Icon="@Icons.Material.Filled.Link" Target="_blank" Href="https://mindworkai.org/swagger-ui.html">Interactive documentation aka Swagger UI</MudListItem>
</MudList>

<PreviewPrototype/>
<div class="mb-6"></div>

<MudStack Row="@true" AlignItems="AlignItems.Center" Class="mb-3">
    <MudSelect T="ProgrammingLanguages" @bind-Value="@this.selectedProgrammingLanguage" AdornmentIcon="@Icons.Material.Filled.Code" Adornment="Adornment.Start" Label="Programming language" Variant="Variant.Outlined" Margin="Margin.Dense" Validation="@this.ValidateProgrammingLanguage">
        @foreach (var language in Enum.GetValues<ProgrammingLanguages>())
        {
            <MudSelectItem Value="@language">@language.Name()</MudSelectItem>
        }
    </MudSelect>
    @if (this.selectedProgrammingLanguage is ProgrammingLanguages.OTHER)
    {
        <MudTextField T="string" @bind-Text="@this.otherProgrammingLanguage" Validation="@this.ValidateOtherLanguage" Label="Other language" Variant="Variant.Outlined" Margin="Margin.Dense" UserAttributes="@USER_INPUT_ATTRIBUTES"/>
    }
</MudStack>

<MudStack Row="@false" AlignItems="AlignItems.Stretch" Class="mb-3">
    <MudSelect T="DataSources" @bind-Value="@this.selectedDataSource" AdornmentIcon="@Icons.Material.Filled.Dataset" Adornment="Adornment.Start" Label="Data source" Variant="Variant.Outlined" Margin="Margin.Dense" Validation="@this.ValidateDataSource">
        @foreach (var dataSource in Enum.GetValues<DataSources>())
        {
            <MudSelectItem Value="@dataSource">@dataSource.Name()</MudSelectItem>
        }
    </MudSelect>
    @if (this.selectedDataSource is DataSources.CUSTOM)
    {
        <MudTextField T="string" @bind-Text="@this.otherDataSource" Validation="@this.ValidateOtherDataSource" Label="Describe your data source" Variant="Variant.Outlined" Margin="Margin.Normal" Lines="3" AutoGrow="@true" MaxLines="6" UserAttributes="@USER_INPUT_ATTRIBUTES"/>
    }
</MudStack>

<MudStack Row="@false" AlignItems="AlignItems.Stretch" Class="mb-3">
    <MudSelectExtended
        T="Auth"
        ShrinkLabel="@true"
        MultiSelection="@true"
        MultiSelectionTextFunc="@this.GetMultiSelectionAuthText"
        @bind-SelectedValues="@this.selectedAuthenticationMethods"
        Validation="@this.ValidateAuthenticationMethods"
        Label="Authentication method(s)"
        Variant="Variant.Outlined"
        Margin="Margin.Dense">
        @foreach (var authMethod in Enum.GetValues<Auth>())
        {
            <MudSelectItemExtended Value="@authMethod">@authMethod.Name()</MudSelectItemExtended>
        }
    </MudSelectExtended>
    <MudTextField T="string" @bind-Text="@this.authDescription" ShrinkLabel="@true" Label="Describe how you planned the authentication" Validation="@this.ValidateAuthDescription" Variant="Variant.Outlined" Margin="Margin.Normal" Lines="3" AutoGrow="@true" MaxLines="6" UserAttributes="@USER_INPUT_ATTRIBUTES"/>
</MudStack>

<ProviderSelection @bind-ProviderSettings="@this.providerSettings" ValidateProvider="@this.ValidatingProvider"/>